//--------------------------------------------------------------------------------------
// Copyright 2014 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------
// Generated by ShaderGenerator.exe version 0.13
//--------------------------------------------------------------------------------------

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif

// -------------------------------------
layout (std140, row_major) uniform cbPerModelValues
{
   mat4 World;
   mat4 NormalMatrix;
   mat4 WorldviewProjMatrixection;
   mat4 InverseWorld;
   mat4 LightWorldviewProjMatrixection;
   vec4 BoundingBoxCenterWorldSpace;
   vec4 BoundingBoxHalfWorldSpace;
   vec4 BoundingBoxCenterObjectSpace;
   vec4 BoundingBoxHalfObjectSpace;
};

// -------------------------------------
layout (std140, row_major) uniform cbPerFrameValues
{
   mat4  View;
   mat4  InverseView;
   mat4  Projection;
   mat4  viewProjMatrixection;
   vec4  AmbientColor;
   vec4  LightColor;
   vec4  LightDirection;
   vec4  EyePosition;
   vec4  TotalTimeInSeconds;
};

#ifdef GLSL_VERTEX_SHADER

#define POSITION  0
#define NORMAL    1
#define BINORMAL  2
#define TANGENT   3
#define COLOR   4
#define TEXCOORD0 5
// -------------------------------------
layout (location = POSITION)  in vec3 Position; // Projected position
layout (location = NORMAL)    in vec3 Normal;
layout (location = TEXCOORD0) in vec2 UV0;
// -------------------------------------
out vec4 outPosition;
out vec3 outNormal;
out vec2 outUV0;
out vec3 outWorldPosition; // Object space position 
#endif //GLSL_VERTEX_SHADER
#ifdef GLSL_FRAGMENT_SHADER
// -------------------------------------
in vec4 outPosition;
in vec3 outNormal;
in vec2 outUV0;
in vec3 outWorldPosition; // Object space position 
// -------------------------------------
uniform sampler2D texture0;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D texture3;
// -------------------------------------
vec4 DM( )
{
    return texture(texture0,((outUV0)) );
}

// -------------------------------------
vec4 NM( )
{
    return texture(texture1,((outUV0)) );
}

// -------------------------------------
vec4 SM( )
{
    return texture(texture2,((outUV0)) );
}

// -------------------------------------
vec4 AO( )
{
    return texture(texture3,((outUV0)) );
}

// -------------------------------------
vec4 DIFFUSE( )
{
    return DM();
}

// -------------------------------------
vec4 NORMAL( )
{
    return NM() * 2.0 - 1.0;
}

// -------------------------------------
vec4 SPECULAR( )
{
    return SM();
}

// -------------------------------------
vec4 AMBIENT( )
{
    return AO();
}

// -------------------------------------
#endif //GLSL_FRAGMENT_SHADER

#ifdef GLSL_VERTEX_SHADER
// -------------------------------------
uniform mat4 viewProjMatrix;
uniform mat4 worldMatrix[240];
void main( )
{

    outPosition      = viewProjMatrix * (worldMatrix[gl_InstanceID] * vec4( Position, 1.0));
    outWorldPosition = (vec4( Position, 1.0) * worldMatrix[gl_InstanceID] ).xyz;

    outNormal   = Normal   * mat3(worldMatrix[gl_InstanceID]);
    outUV0 = UV0;

    gl_Position = outPosition;
}

#endif //GLSL_VERTEX_SHADER

#ifdef GLSL_FRAGMENT_SHADER
out vec4 fragColor;// -------------------------------------
void main( )
{
    vec4 result = vec4(0,0,0,1);

    vec3 normal   = outNormal;

    // Specular-related computation
    vec3 eyeDirection  = normalize(outWorldPosition - EyePosition.xyz);
    vec3 Reflection    = reflect( eyeDirection, normal );
    //vec3 lightDirection = -LightDirection.xyz;
    vec3 lightDirection = -vec3(0.0, 0.0, 1.0);
    
    float  rDotL = max(0.0, dot( Reflection.xyz, lightDirection.xyz ));

    vec4 albedo = DIFFUSE();
    vec4 col = albedo;// * AMBIENT();
    col += pow(rDotL, 32.0) * clamp(albedo*1.25,0.0,1.0);
    fragColor =  col;
}

#endif //GLSL_FRAGMENT_SHADER
